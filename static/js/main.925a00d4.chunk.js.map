{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/CounterButton.js","components/Header.js","components/ErrorBoundary.js","containers/App.js","actions/SetSearchFieldAction.js","constants.js","actions/RequestRobotsAction.js","serviceWorker.js","reducers/RobotsReducer.js","index.js"],"names":["Card","username","name","email","phone","className","src","alt","CardList","robots","map","robot","key","id","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","children","CounterButton","updateCount","setState","state","count","nextProps","nextState","nextContext","this","color","onClick","Component","Header","ErrorBoundary","hasError","error","errorInfo","App","onRequestRobots","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialSearchState","initialRequestState","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.925a00d4.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Card ({ username, name, email, phone }) {\n    return (\n        <div className='bg-light-green dib br3 pa2 ma2 grow bw2 shadow-5\n        '>\n            <img src={`https://robohash.org/${username}?200x200`} alt=\"robot\"/>\n            <div>\n                <h2>{ name }</h2>\n                <p>{ email }</p>\n                <p>{ phone }</p>\n            </div>\n        </div>\n    );\n}","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({ robots }) => {\n    return (\n        <div>\n            {\n                robots.map(robot => {\n                    return <Card\n                        key = {robot.id}\n                        username = {robot.username}\n                        name = {robot.name}\n                        email = {robot.email}\n                        phone = {robot.phone}\n                    />\n                })\n            }\n        </div>\n    );\n};\n\nexport default CardList;","import React from \"react\";\n\nconst SearchBox = ({searchField, searchChange}) => {\n    return (\n        <div className=\"pa2\">\n            <input\n                className=\"pa3 ba b--green bg-lightest-blue\"\n                type=\"search\"\n                placeholder=\"Search robots\"\n                onChange={searchChange}\n            />\n        </div>\n    );\n};\n\nexport default SearchBox;","// import React from \"react\"\n// import \"../styles/Scroll.css\"\n\nconst Scroll = (props) => {\n\n    // return (\n    //     <div id=\"scroll\" style={{ overflowY: \"scroll\", border: \"5px solid black\", height: \"500px\"}}>\n    //         {props.children}\n    //     </div>\n    // );\n    return props.children;\n};\n\nexport default Scroll;","import React, {Component} from \"react\";\n\nclass CounterButton extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            count: 0\n        }\n    }\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        return this.state.count !== nextState.count;\n    }\n\n\n    updateCount = () => {\n        this.setState(state => {\n            return {count: state.count + 1}\n        })\n    }\n\n    render() {\n        return <button className=\"pa3 ba b--green bg-lightest-blue\" color={this.props.color} onClick={this.updateCount}>\n            Count: {this.state.count}\n        </button>\n    }\n}\n\nexport default CounterButton;","import React, {Component} from \"react\";\nimport CounterButton from \"./CounterButton\";\n\nclass Header extends Component {\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        return false;\n    }\n\n    render() {\n        return (\n            <div>\n                return <h1 className=\"f1\">RoboFriends</h1>\n                <CounterButton color={'red'}/>\n            </div>\n        );\n    }\n}\n\nexport default Header;","import React, {Component} from \"react\";\n\nclass ErrorBoundary extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, errorInfo) {\n        this.setState({hasError: true});\n    }\n\n    render() {\n        const {hasError} = this.state;\n        return hasError ? <h1>Oops! That is not good.</h1> : this.props.children\n    }\n}\n\nexport default ErrorBoundary;","import React, { Component } from \"react\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport Header from \"../components/Header\";\nimport ErrorBoundary from \"../components/ErrorBoundary\";\n\nimport '../styles/App.css'\nimport { connect } from 'react-redux';\nimport { setSearchField } from \"../actions/SetSearchFieldAction\";\nimport { requestRobots } from \"../actions/RequestRobotsAction\";\n\n\nconst mapStateToProps = state => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        // onRequestRobots: () => requestRobots(dispatch) or i can do this\n        onRequestRobots: () => dispatch(requestRobots())\n    }\n};\n\nclass App extends Component{\n\n    componentDidMount() {\n        this.props.onRequestRobots();\n    }\n\n    render() {\n        const { searchField, onSearchChange, robots, isPending } = this.props,\n            filteredRobots = robots.filter(robot => {\n                return robot.name.toLowerCase().includes(searchField.toLowerCase())\n            });\n\n        return isPending ?\n            <h1>Loading</h1> :\n            <div className=\"tc\">\n                <Header/>\n                <SearchBox searchChange={onSearchChange}/>\n                <Scroll>\n                    <ErrorBoundary>\n                        <CardList robots={filteredRobots}/>\n                    </ErrorBoundary>\n                </Scroll>\n            </div>;\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD } from '../constants'\n\nexport const setSearchField = (text) => ({\n   type: CHANGE_SEARCH_FIELD,\n   payload: text\n});","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILURE = 'REQUEST_ROBOTS_FAILURE';\n","import { REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILURE } from \"../constants\";\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILURE, payload: error }))\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILURE } from '../constants'\n\nconst initialSearchState = {\n    searchField: ''\n};\n\nexport const searchRobots = (state=initialSearchState, action={}) => {\n    switch (action.type) {\n        case CHANGE_SEARCH_FIELD:\n            // return { ...state, searchField: action.payload }; --Same as below\n            return Object.assign({}, state, {searchField: action.payload});\n        default:\n            return state;\n    }\n};\n\nconst initialRequestState = {\n    isPending: false,\n    robots: [],\n    error: ''\n};\n\nexport const requestRobots = (state=initialRequestState, action={}) => {\n    switch (action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, {isPending: true});\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, {isPending: false, robots: action.payload});\n        case REQUEST_ROBOTS_FAILURE:\n            return Object.assign({}, state, {isPending: false, error: action.payload});\n        default:\n            return state;\n    }\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { Provider } from 'react-redux';\nimport { createLogger } from \"redux-logger/src\";\nimport thunkMiddleware from 'redux-thunk';\nimport { searchRobots, requestRobots } from \"./reducers/RobotsReducer\";\n\n// const logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\n// const store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}